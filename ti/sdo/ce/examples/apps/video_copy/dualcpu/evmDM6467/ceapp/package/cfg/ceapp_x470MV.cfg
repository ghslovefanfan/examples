/*
 *  ======== package/cfg/ceapp_x470MV.cfg ========
 *  This generated configuration script runs the user's configuration script
 *  the context of a specific target and platform in order to generate
 *  all the files necessary to create an executable; e.g., linker command
 *  files, static C/C++ data structures, etc.
 */

/*
 *  ======== _runescape ========
 *  Recursive unescape to decode serialized strings
 */
function _runescape(obj) {
    for (var i in obj) {
        if (obj[i] != null) {
            if (typeof obj[i] == 'string') {
                obj[i] = unescape(obj[i]);
            }
            else if (typeof obj[i] == 'object') {
                _runescape(obj[i]);
            }
        }
    }
}

/*
 *  ======== _getPlatCfg ========
 */
function _getPlatCfg() {
    var tmp = {};
    _runescape(tmp);
    return (tmp);
}
/*
 *  ======== _cfginit ========
 */
function _cfginit() {
    xdc.loadPackage('xdc.services.intern.cmd');
    var prog = xdc.om['xdc.cfg.Program'];

    /* initialize prog attrs from build model */
    var build = {
        releases: {
            0: {
                name: "ceapp",
                attrs: {
                    prefix: "",
                    label: "default"
                },
                otherFiles: {}
            }
        },
        target: {
            $name:"gnu.targets.MVArm9",
            name: "MVArm9",
            suffix: "470MV",
            isa: "v5T",
            model: {
                $name:"gnu.targets.MVArm9/model",
                endian: "little"
            },
            os: "Linux",
            rts: "gnu.targets.rts470MV",
            dllExt: ".so",
            platform: "ti.platforms.evmDM6446",
            platforms: {
                $name:"gnu.targets.MVArm9/platforms",
                0: "ti.platforms.evmDM6446"
            },
            version: "gnu.targets.MVArm9%7B1%2C0%2C3.4%2C3",
            debugGen: {
                $name:"gnu.targets.MVArm9/debugGen",
            },
            extensions: {
                $name:"gnu.targets.MVArm9/extensions",
                ".asm": {
                    $name:"gnu.targets.MVArm9/extensions/'.asm'",
                    suf: ".asm",
                    typ: "asm"
                },
                ".c": {
                    $name:"gnu.targets.MVArm9/extensions/'.c'",
                    suf: ".c",
                    typ: "c"
                },
                ".cpp": {
                    $name:"gnu.targets.MVArm9/extensions/'.cpp'",
                    suf: ".cpp",
                    typ: "cpp"
                },
                ".cxx": {
                    $name:"gnu.targets.MVArm9/extensions/'.cxx'",
                    suf: ".cxx",
                    typ: "cpp"
                },
                ".C": {
                    $name:"gnu.targets.MVArm9/extensions/'.C'",
                    suf: ".C",
                    typ: "cpp"
                },
                ".cc": {
                    $name:"gnu.targets.MVArm9/extensions/'.cc'",
                    suf: ".cc",
                    typ: "cpp"
                },
                ".s470MV": {
                    $name:"gnu.targets.MVArm9/extensions/'.s470MV'",
                    suf: ".s470MV",
                    typ: "asm"
                }
            },
            versionMap: {
                $name:"gnu.targets.MVArm9/versionMap",
                "gcc3.2": "1%2C0%2C3.2%2C0"
            },
            alignDirectiveSupported: false,
            rootDir: "/opt/mv_pro_4.0.1/montavista/pro/devkit/arm/v5t_le",
            profiles: {
                $name:"gnu.targets.MVArm9/profiles",
                debug: {
                    $name:"gnu.targets.MVArm9/profiles/'debug'",
                    compileOpts: {
                        $name:"gnu.targets.MVArm9/profiles/'debug'/compileOpts",
                        copts: "-g",
                        defs: "-D_DEBUG_%3D1"
                    },
                    linkOpts: "-g",
                    filters: {
                        $name:"gnu.targets.MVArm9/profiles/'debug'/filters",
                    }
                },
                release: {
                    $name:"gnu.targets.MVArm9/profiles/'release'",
                    compileOpts: {
                        $name:"gnu.targets.MVArm9/profiles/'release'/compileOpts",
                        copts: "-O2"
                    },
                    linkOpts: "",
                    filters: {
                        $name:"gnu.targets.MVArm9/profiles/'release'/filters",
                    }
                },
                profile: {
                    $name:"gnu.targets.MVArm9/profiles/'profile'",
                    compileOpts: {
                        $name:"gnu.targets.MVArm9/profiles/'profile'/compileOpts",
                        copts: "-g%20-pg"
                    },
                    linkOpts: "-pg",
                    filters: {
                        $name:"gnu.targets.MVArm9/profiles/'profile'/filters",
                    }
                },
                coverage: {
                    $name:"gnu.targets.MVArm9/profiles/'coverage'",
                    compileOpts: {
                        $name:"gnu.targets.MVArm9/profiles/'coverage'/compileOpts",
                        copts: "-fprofile-arcs%20-ftest-coverage"
                    },
                    linkOpts: "",
                    filters: {
                        $name:"gnu.targets.MVArm9/profiles/'coverage'/filters",
                    }
                }
            },
            sectMap: {
                $name:"gnu.targets.MVArm9/sectMap",
            },
            stdInclude: "gnu/targets/std.h",
            stdTypes: {
                $name:"gnu.targets.MVArm9/stdTypes",
                t_IArg: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_IArg",
                    size: 4,
                    align: 4
                },
                t_Char: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Char",
                    size: 1,
                    align: 1
                },
                t_Double: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Double",
                    size: 8,
                    align: 4
                },
                t_Float: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Float",
                    size: 4,
                    align: 4
                },
                t_Fxn: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Fxn",
                    size: 4,
                    align: 4
                },
                t_Int: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Int",
                    size: 4,
                    align: 4
                },
                t_Int8: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Int8",
                    size: 1,
                    align: 1
                },
                t_Int16: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Int16",
                    size: 2,
                    align: 2
                },
                t_Int32: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Int32",
                    size: 4,
                    align: 4
                },
                t_Int40: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Int40",
                },
                t_Int64: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Int64",
                    size: 8,
                    align: 4
                },
                t_Long: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Long",
                    size: 4,
                    align: 4
                },
                t_LDouble: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_LDouble",
                    size: 8,
                    align: 4
                },
                t_LLong: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_LLong",
                    size: 8,
                    align: 4
                },
                t_Ptr: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Ptr",
                    size: 4,
                    align: 4
                },
                t_Short: {
                    $name:"gnu.targets.MVArm9/stdTypes/t_Short",
                    size: 2,
                    align: 2
                }
            },
            bitsPerChar: 8,
            GCCVERS: "3.4.3",
            GCCTARG: "armv5tl-montavista-linuxeabi",
            LONGNAME: "/bin/arm_v5t_le-gcc",
            CYGWIN: true,
            ar: {
                $name:"gnu.targets.MVArm9/ar",
                cmd: "%24%28rootDir%29/bin/arm_v5t_le-ar",
                opts: "cr"
            },
            arOpts: {
                $name:"gnu.targets.MVArm9/arOpts",
                prefix: "",
                suffix: ""
            },
            lnk: {
                $name:"gnu.targets.MVArm9/lnk",
                cmd: "%24%28rootDir%29/bin/arm_v5t_le-gcc",
                opts: ""
            },
            lnkOpts: {
                $name:"gnu.targets.MVArm9/lnkOpts",
                prefix: "",
                suffix: "-lstdc++%20-L%24%28rootDir%29/%24%28GCCTARG%29/lib"
            },
            cc: {
                $name:"gnu.targets.MVArm9/cc",
                cmd: "%24%28rootDir%29/bin/arm_v5t_le-gcc%20-c%20-MD%20-MF%20%24@.dep",
                opts: ""
            },
            ccOpts: {
                $name:"gnu.targets.MVArm9/ccOpts",
                prefix: "-fPIC%20-Wunused",
                suffix: "-Dfar%3D%20"
            },
            asm: {
                $name:"gnu.targets.MVArm9/asm",
                cmd: "%24%28rootDir%29/bin/arm_v5t_le-gcc%20-c",
                opts: "-x%20assembler"
            },
            asmOpts: {
                $name:"gnu.targets.MVArm9/asmOpts",
                prefix: "",
                suffix: ""
            },
            includeOpts: ""
        },
        test: {},
        cfgScript: "/opt/dvsdk_1_40_02_33/codec_engine_2_10_02/examples/ti/sdo/ce/examples/apps/video_copy/dualcpu/evmDM6467/ceapp.cfg",
        cfgHome: "ceapp",
        profile: "release"
    };
    _runescape(build);
    build.cfgArgs = undefined;
    prog.build = build;
    
    prog.name = "ceapp.x470MV";


    prog.endian = prog.build.target.model.endian;

    /* use the platform package's Platform module */
    var Platform = xdc.useModule("ti.platforms.evmDM6467.Platform");
    prog.platformName = "ti.platforms.evmDM6467";
    prog.platform = Platform.create("", _getPlatCfg());
    /* record the executable's package name */
    prog.$$bind("$buildpkg", "ceapp");

    /* record build-model information required during config generation */
    prog.$$bind("$$isasm", 0);
    prog.$$bind("$$isrom", 0);
    prog.$$bind("$$gentab", [
    ]);
    
    /* bind prog to an appropriate execution context */
    prog.cpu = prog.platform.getExeContext(prog);

    /* import the target's run-time support pkg */
    xdc.loadPackage("gnu.targets.rts470MV");
}
    
/* function to import the cfg script's package */
function _userscript($$legacy) {
    var home;
    var spath;
    home = xdc.loadPackage("ceapp");
    
    xdc.om.$$bind('$homepkg', home);

    /* load & run program cfg script and monitor all loaded files */
    _runCfg("/opt/dvsdk_1_40_02_33/codec_engine_2_10_02/examples/ti/sdo/ce/examples/apps/video_copy/dualcpu/evmDM6467/ceapp.cfg", spath, "package/cfg/ceapp_x470MV",  
                            false, 
                            false,
                            _getPlatCfg());

    /*
     *  ======== _runCfg ========
     *  Run a user supplied configuration script and prevent user's script from
     *  overwriting the global variable prog.
     */
    function _runCfg(cfgScript, path, programName, legacyTcf, legacyCfg,
        platParams)
    {
        if (legacyTcf) {
            /* save current global variables */
            var $save = {prog: utils.global.prog, Program: Program};
    
            /* initialize global variables for legacy config scripts */
            environment["config.programName"] = programName;
            environment["config.platform"] = Program.platformName;
            utils.seedPath = environment["config.importPath"];
            utils.loadPlatform.params = platParams;
            Program = $$legacy.Program;     /* defined in cfg.tci */
            
            /* run legacy config script with prog == to RTSC Program; this
             * allows legacy script to read build atributes from RTSC model
             * before re-creating the prog object
             */
            utils.importFile(cfgScript, path);  
    
            /* restore global variables; now prog == TCOM prog because
             * utils.loadPlatform() creates the TCOM prog object.
             */
            $$legacy.prog = utils.global.prog;  /* in case XDC wants it */
            utils.global.prog = $save.prog;
            Program = $save.Program;
    
            /* run XDC configuration script, if it exists */
            if (legacyCfg) {
                utils.importFile(cfgScript.replace(/\.tcf/, ".cfg"), path);
            }
        }
        else {
            utils.importFile(cfgScript, path);
        }
    }
}
    
function _postinit() {

    var cout = null;

    var prog = xdc.om['xdc.cfg.Program'];
    /* get the exec command for this executable */
    if (prog.execCmd == null) {
        prog.execCmd = prog.platform.getExecCmd(prog,
            xdc.om["ti.platforms.evmDM6467"].packageBase);
    }
    var cout = "define EXEC." + prog.name + '\n\n';
    cout += prog.execCmd;
    cout += "\nendef\n\n";

    utils.genDep("package/cfg/ceapp_x470MV", "ceapp", utils.loadedFiles, cout, null);
}
