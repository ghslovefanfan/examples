/* 
 *  Copyright 2008
 *  Texas Instruments Incorporated
 *
 *  All rights reserved.  Property of Texas Instruments Incorporated
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 * 
 */
/*
 *  ======== local.cfg ========
 */

/* use an osal.  osalGlobal is configured below, based on target. */
var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');

/* set to true to enable checked libraries */
xdc.useModule('ti.sdo.ce.Settings').checked = false;

/* get various codec modules; i.e., implementation of codecs */
var decoder =
    xdc.useModule('ti.sdo.ce.examples.codecs.viddec2_copy.VIDDEC2_COPY');
var encoder =
    xdc.useModule('ti.sdo.ce.examples.codecs.videnc1_copy.VIDENC1_COPY');

/* Enable VIDENC1_COPY codec's DMA support */
encoder.alg.useDMA = true;

var DMAN3 = xdc.useModule('ti.sdo.fc.dman3.DMAN3');
DMAN3.debug = true;
DMAN3.trace = true;

var ACPY3 = xdc.useModule('ti.sdo.fc.acpy3.ACPY3');
ACPY3.debug = true;
ACPY3.trace = true;


if (Program.build.target.os == undefined) {
    /* Presume this is a BIOS OS */
    osalGlobal.runtimeEnv = osalGlobal.DSPBIOS;

    /* "DDR2" is a BIOS memory segment defined in the BIOS .tcf script */
    osalGlobal.defaultMemSegId = "DDR2";

    /*  use external memory segment (DDR2) for DMAN3 internal segment to
     *  force algorithms to use external memory for what they think is
     *  internal memory -- we do this in a memory-constrained environment
     *  where all internal memory is used by cache and/or algorithm scratch mem.
     *
     *  By setting DMAN3.heapInternal = <external-heap>  DMAN3 *may not* supply
     *  ACPY3_PROTOCOL IDMA3 channels the protocol required internal memory for
     *  IDMA3 channel 'env' memory. To deal with this catch-22 situation we
     *  configure DMAN3 with hook-functions to obtain internal-scratch memory
     *  from the shared scratch pool for the associated algorithm's
     *  scratch-group (i.e. it first tries to get the internal scratch memory
     *  from DSKT2 shared allocation pool, hoping there is enough extra memory
     *  in the shared pool, if that doesn't work it will try persistent
     *  allocation from DMAN3.internalHeap).
     */
    DMAN3.heapInternal    = "DDR2";
    // DMAN3.heapInternal = "L1DHEAP"; /* L1DHEAP is an internal segment */
    DMAN3.heapExternal    = "DDR2";
    DMAN3.idma3Internal   = false;
    DMAN3.scratchAllocFxn = "DSKT2_allocScratch";
    DMAN3.scratchFreeFxn  = "DSKT2_freeScratch";

    var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
    DSKT2.DARAM0     = "L1DHEAP";
    DSKT2.DARAM1     = "L1DHEAP";
    DSKT2.DARAM2     = "L1DHEAP";
    DSKT2.SARAM0     = "L1DHEAP";
    DSKT2.SARAM1     = "L1DHEAP";
    DSKT2.SARAM2     = "L1DHEAP";
    DSKT2.ESDATA     = "DDR2";
    DSKT2.IPROG      = "L1DHEAP";
    DSKT2.EPROG      = "DDR2";
    DSKT2.DSKT2_HEAP = "DDR2";    /* to allocate internal DSKT2 object */

    //DSKT2.debug = true;

    //var ACPY3 = xdc.useModule('ti.sdo.fc.acpy3.ACPY3');
    //ACPY3.debug = true;
}
else if (Program.build.target.os == "Linux") {
    osalGlobal.runtimeEnv = osalGlobal.LINUX;
}
else {
    /* Unsupported OS.  Throw an exception to alert the user. */
    throw ("Unsupported target OS");
}

/*
 *  ======== Engine Configuration ========
 */
var Engine = xdc.useModule('ti.sdo.ce.Engine');
var myEngine = Engine.create("video2_copy", [
    {
        name : "viddec2_copy",
        mod  : decoder,
        local: true
    },
    {
        name : "videnc1_copy",
        mod  : encoder,
        local: true
    }
]);
/*
 *  @(#) ti.sdo.ce.examples.apps.video2_copy; 1, 0, 0,46; 9-9-2008 02:01:45; /db/atree/library/trees/ce-h27x/src/
 */

